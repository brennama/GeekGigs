<?php

namespace App\Models;

use App\Enums\ExperienceLevel;
use App\Enums\JobType;
use App\Enums\RemotePolicy;
use Illuminate\Contracts\Support\Arrayable;
use Illuminate\Contracts\Support\Jsonable;
use Throwable;

/**
 * Class Job
 *
 * @package App\Models
 */
class Job implements Arrayable, Jsonable
{
    /**
     * Unique identifier generated by elasticsearch.
     *
     * A model will not contain an id until
     * it has been indexed in elasticsearch.
     */
    public ?string $id = null;

    /**
     * Company name.
     */
    public string $company;

    /**
     * Company website url.
     */
    public ?string $companyUrl = null;

    /**
     * Job application url (external site e.g. greenhouse).
     */
    public string $jobUrl;

    /**
     * Job title.
     */
    public string $title;

    /**
     * Job description.
     */
    public ?string $description = null;

    /**
     * Job city.
     */
    public string $city;

    /**
     * Job state.
     */
    public string $state;

    /**
     * Company remote policy.
     */
    public RemotePolicy $remotePolicy;

    /**
     * Job required experience level.
     */
    public ExperienceLevel $experienceLevel;

    /**
     * Job type.
     */
    public JobType $jobType;

    /**
     * Minimum salary for the job.
     */
    public int $salaryRangeMin;

    /**
     * Maximum salary for the job.
     */
    public int $salaryRangeMax;

    /**
     * Associated tags.
     */
    public array $tags = [];

    /**
     * Cast object to array.
     */
    public function toArray(): array
    {
        return (array) $this;
    }

    /**
     * Serialize model as json.
     *
     * @throws Throwable
     */
    public function toJson($options = 0): string
    {
        return json_encode($this->toArray(), JSON_THROW_ON_ERROR);
    }

    /**
     * Create model instance from array.
     */
    public static function fromArray(array $values): static
    {
        $self = new static();
        $self->id = $values['_id'] ?? $values['id'] ?? null;
        $self->company = $values['company'];
        $self->companyUrl = $values['companyUrl'] ?? null;
        $self->jobUrl = $values['jobUrl'];
        $self->title = $values['title'];
        $self->description = $values['description'] ?? null;
        $self->city = $values['city'];
        $self->state = $values['state'];
        $self->salaryRangeMin = $values['salaryRangeMin'];
        $self->salaryRangeMax = $values['salaryRangeMax'];
        $self->tags = $values['tags'] ?? [];
        $self->remotePolicy = RemotePolicy::tryFrom($values['remotePolicy']) ?? RemotePolicy::OnSite;
        $self->experienceLevel = ExperienceLevel::tryFrom($values['experienceLevel']) ?? ExperienceLevel::MidLevel;
        $self->jobType = JobType::tryFrom($values['jobType']) ?? JobType::FullTime;

        return $self;
    }
}
